// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: gangway.proto

package gangway

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// JobExecutionStatus is a 1:1 translation of the existing "ProwJobState" type
// in prow/apis/prowjobs/v1/types.go.
type JobExecutionStatus int32

const (
	JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED JobExecutionStatus = 0
	JobExecutionStatus_TRIGGERED                        JobExecutionStatus = 1
	JobExecutionStatus_PENDING                          JobExecutionStatus = 2
	JobExecutionStatus_SUCCESS                          JobExecutionStatus = 3
	JobExecutionStatus_FAILURE                          JobExecutionStatus = 4
	JobExecutionStatus_ABORTED                          JobExecutionStatus = 5
	JobExecutionStatus_ERROR                            JobExecutionStatus = 6
)

// Enum value maps for JobExecutionStatus.
var (
	JobExecutionStatus_name = map[int32]string{
		0: "JOB_EXECUTION_STATUS_UNSPECIFIED",
		1: "TRIGGERED",
		2: "PENDING",
		3: "SUCCESS",
		4: "FAILURE",
		5: "ABORTED",
		6: "ERROR",
	}
	JobExecutionStatus_value = map[string]int32{
		"JOB_EXECUTION_STATUS_UNSPECIFIED": 0,
		"TRIGGERED":                        1,
		"PENDING":                          2,
		"SUCCESS":                          3,
		"FAILURE":                          4,
		"ABORTED":                          5,
		"ERROR":                            6,
	}
)

func (x JobExecutionStatus) Enum() *JobExecutionStatus {
	p := new(JobExecutionStatus)
	*p = x
	return p
}

func (x JobExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gangway_proto_enumTypes[0].Descriptor()
}

func (JobExecutionStatus) Type() protoreflect.EnumType {
	return &file_gangway_proto_enumTypes[0]
}

func (x JobExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobExecutionStatus.Descriptor instead.
func (JobExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{0}
}

// JobExecutionType is a 1:1 translation of the existing "ProwJobType" type
// in prow/apis/prowjobs/v1/types.go.
type JobExecutionType int32

const (
	JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED JobExecutionType = 0
	JobExecutionType_PERIODIC                       JobExecutionType = 1
	JobExecutionType_POSTSUBMIT                     JobExecutionType = 2
	JobExecutionType_PRESUBMIT                      JobExecutionType = 3
	JobExecutionType_BATCH                          JobExecutionType = 4
)

// Enum value maps for JobExecutionType.
var (
	JobExecutionType_name = map[int32]string{
		0: "JOB_EXECUTION_TYPE_UNSPECIFIED",
		1: "PERIODIC",
		2: "POSTSUBMIT",
		3: "PRESUBMIT",
		4: "BATCH",
	}
	JobExecutionType_value = map[string]int32{
		"JOB_EXECUTION_TYPE_UNSPECIFIED": 0,
		"PERIODIC":                       1,
		"POSTSUBMIT":                     2,
		"PRESUBMIT":                      3,
		"BATCH":                          4,
	}
)

func (x JobExecutionType) Enum() *JobExecutionType {
	p := new(JobExecutionType)
	*p = x
	return p
}

func (x JobExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gangway_proto_enumTypes[1].Descriptor()
}

func (JobExecutionType) Type() protoreflect.EnumType {
	return &file_gangway_proto_enumTypes[1]
}

func (x JobExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobExecutionType.Descriptor instead.
func (JobExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{1}
}

type CreateJobExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName          string           `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	JobExecutionType JobExecutionType `protobuf:"varint,2,opt,name=job_execution_type,json=jobExecutionType,proto3,enum=JobExecutionType" json:"job_execution_type,omitempty"`
	Refs             *Refs            `protobuf:"bytes,3,opt,name=refs,proto3" json:"refs,omitempty"`
	PodSpecOptions   *PodSpecOptions  `protobuf:"bytes,4,opt,name=pod_spec_options,json=podSpecOptions,proto3" json:"pod_spec_options,omitempty"`
}

func (x *CreateJobExecutionRequest) Reset() {
	*x = CreateJobExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobExecutionRequest) ProtoMessage() {}

func (x *CreateJobExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobExecutionRequest.ProtoReflect.Descriptor instead.
func (*CreateJobExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{0}
}

func (x *CreateJobExecutionRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CreateJobExecutionRequest) GetJobExecutionType() JobExecutionType {
	if x != nil {
		return x.JobExecutionType
	}
	return JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED
}

func (x *CreateJobExecutionRequest) GetRefs() *Refs {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *CreateJobExecutionRequest) GetPodSpecOptions() *PodSpecOptions {
	if x != nil {
		return x.PodSpecOptions
	}
	return nil
}

type PodSpecOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envs        map[string]string `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PodSpecOptions) Reset() {
	*x = PodSpecOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSpecOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSpecOptions) ProtoMessage() {}

func (x *PodSpecOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSpecOptions.ProtoReflect.Descriptor instead.
func (*PodSpecOptions) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{1}
}

func (x *PodSpecOptions) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PodSpecOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PodSpecOptions) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Look up a single Prow Job execution.
type GetJobExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJobExecutionRequest) Reset() {
	*x = GetJobExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobExecutionRequest) ProtoMessage() {}

func (x *GetJobExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetJobExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobExecutionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Look up all Prow Job executions that match all fields given here.
type ListJobExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string             `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`         // Mapped to URL query parameter `job_name`.
	Status  JobExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=JobExecutionStatus" json:"status,omitempty"` // Mapped to URL query parameter `status`.
}

func (x *ListJobExecutionsRequest) Reset() {
	*x = ListJobExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobExecutionsRequest) ProtoMessage() {}

func (x *ListJobExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListJobExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{3}
}

func (x *ListJobExecutionsRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *ListJobExecutionsRequest) GetStatus() JobExecutionStatus {
	if x != nil {
		return x.Status
	}
	return JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED
}

type JobExecutions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobExecution []*JobExecution `protobuf:"bytes,1,rep,name=job_execution,json=jobExecution,proto3" json:"job_execution,omitempty"`
}

func (x *JobExecutions) Reset() {
	*x = JobExecutions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecutions) ProtoMessage() {}

func (x *JobExecutions) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecutions.ProtoReflect.Descriptor instead.
func (*JobExecutions) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{4}
}

func (x *JobExecutions) GetJobExecution() []*JobExecution {
	if x != nil {
		return x.JobExecution
	}
	return nil
}

type JobExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JobName        string                 `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	JobType        JobExecutionType       `protobuf:"varint,3,opt,name=job_type,json=jobType,proto3,enum=JobExecutionType" json:"job_type,omitempty"`
	JobStatus      JobExecutionStatus     `protobuf:"varint,4,opt,name=job_status,json=jobStatus,proto3,enum=JobExecutionStatus" json:"job_status,omitempty"`
	Refs           *Refs                  `protobuf:"bytes,5,opt,name=refs,proto3" json:"refs,omitempty"`
	PodSpecOptions *PodSpecOptions        `protobuf:"bytes,6,opt,name=pod_spec_options,json=podSpecOptions,proto3" json:"pod_spec_options,omitempty"`
	GcsPath        string                 `protobuf:"bytes,7,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	CreateTime     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CompletionTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
}

func (x *JobExecution) Reset() {
	*x = JobExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecution) ProtoMessage() {}

func (x *JobExecution) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecution.ProtoReflect.Descriptor instead.
func (*JobExecution) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{5}
}

func (x *JobExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobExecution) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobExecution) GetJobType() JobExecutionType {
	if x != nil {
		return x.JobType
	}
	return JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED
}

func (x *JobExecution) GetJobStatus() JobExecutionStatus {
	if x != nil {
		return x.JobStatus
	}
	return JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED
}

func (x *JobExecution) GetRefs() *Refs {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *JobExecution) GetPodSpecOptions() *PodSpecOptions {
	if x != nil {
		return x.PodSpecOptions
	}
	return nil
}

func (x *JobExecution) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *JobExecution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *JobExecution) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

// Refs is a direct, 1:1 translation of the existing "Refs" struct defined in
// prow/apis/prowjobs/v1/types.go.
type Refs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org            string  `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Repo           string  `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	RepoLink       string  `protobuf:"bytes,3,opt,name=repo_link,json=repoLink,proto3" json:"repo_link,omitempty"`
	BaseRef        string  `protobuf:"bytes,4,opt,name=base_ref,json=baseRef,proto3" json:"base_ref,omitempty"`
	BaseSha        string  `protobuf:"bytes,5,opt,name=base_sha,json=baseSha,proto3" json:"base_sha,omitempty"`
	BaseLink       string  `protobuf:"bytes,6,opt,name=base_link,json=baseLink,proto3" json:"base_link,omitempty"`
	Pulls          []*Pull `protobuf:"bytes,7,rep,name=pulls,proto3" json:"pulls,omitempty"`
	PathAlias      string  `protobuf:"bytes,8,opt,name=path_alias,json=pathAlias,proto3" json:"path_alias,omitempty"`
	WorkDir        bool    `protobuf:"varint,9,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	CloneUri       string  `protobuf:"bytes,10,opt,name=clone_uri,json=cloneUri,proto3" json:"clone_uri,omitempty"`
	SkipSubmodules bool    `protobuf:"varint,11,opt,name=skip_submodules,json=skipSubmodules,proto3" json:"skip_submodules,omitempty"`
	CloneDepth     int32   `protobuf:"varint,12,opt,name=clone_depth,json=cloneDepth,proto3" json:"clone_depth,omitempty"`
	SkipFetchHead  bool    `protobuf:"varint,13,opt,name=skip_fetch_head,json=skipFetchHead,proto3" json:"skip_fetch_head,omitempty"`
}

func (x *Refs) Reset() {
	*x = Refs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refs) ProtoMessage() {}

func (x *Refs) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refs.ProtoReflect.Descriptor instead.
func (*Refs) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{6}
}

func (x *Refs) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Refs) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Refs) GetRepoLink() string {
	if x != nil {
		return x.RepoLink
	}
	return ""
}

func (x *Refs) GetBaseRef() string {
	if x != nil {
		return x.BaseRef
	}
	return ""
}

func (x *Refs) GetBaseSha() string {
	if x != nil {
		return x.BaseSha
	}
	return ""
}

func (x *Refs) GetBaseLink() string {
	if x != nil {
		return x.BaseLink
	}
	return ""
}

func (x *Refs) GetPulls() []*Pull {
	if x != nil {
		return x.Pulls
	}
	return nil
}

func (x *Refs) GetPathAlias() string {
	if x != nil {
		return x.PathAlias
	}
	return ""
}

func (x *Refs) GetWorkDir() bool {
	if x != nil {
		return x.WorkDir
	}
	return false
}

func (x *Refs) GetCloneUri() string {
	if x != nil {
		return x.CloneUri
	}
	return ""
}

func (x *Refs) GetSkipSubmodules() bool {
	if x != nil {
		return x.SkipSubmodules
	}
	return false
}

func (x *Refs) GetCloneDepth() int32 {
	if x != nil {
		return x.CloneDepth
	}
	return 0
}

func (x *Refs) GetSkipFetchHead() bool {
	if x != nil {
		return x.SkipFetchHead
	}
	return false
}

// Pull is a direct, 1:1 translation of the existing "Pull" struct defined in
// prow/apis/prowjobs/v1/types.go.
type Pull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     int32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Author     string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Sha        string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Ref        string `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
	Link       string `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	CommitLink string `protobuf:"bytes,7,opt,name=commit_link,json=commitLink,proto3" json:"commit_link,omitempty"`
	AuthorLink string `protobuf:"bytes,8,opt,name=author_link,json=authorLink,proto3" json:"author_link,omitempty"`
}

func (x *Pull) Reset() {
	*x = Pull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pull) ProtoMessage() {}

func (x *Pull) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pull.ProtoReflect.Descriptor instead.
func (*Pull) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{7}
}

func (x *Pull) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Pull) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Pull) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Pull) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Pull) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Pull) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Pull) GetCommitLink() string {
	if x != nil {
		return x.CommitLink
	}
	return ""
}

func (x *Pull) GetAuthorLink() string {
	if x != nil {
		return x.AuthorLink
	}
	return ""
}

var File_gangway_proto protoreflect.FileDescriptor

var file_gangway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x6e, 0x67, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x04, 0x72,
	0x65, 0x66, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e,
	0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec,
	0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x0d, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0d,
	0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8e, 0x03, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52,
	0x65, 0x66, 0x73, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x6f, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x82, 0x03, 0x0a, 0x04, 0x52, 0x65, 0x66, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x68, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x1b, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x6b, 0x69, 0x70, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x2a,
	0x88, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x6e, 0x0a, 0x10, 0x4a, 0x6f,
	0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x32, 0x9a, 0x02, 0x0a, 0x04, 0x50,
	0x72, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x42,
	0x16, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x20, 0x5a, 0x1e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f,
	0x77, 0x2f, 0x67, 0x61, 0x6e, 0x67, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gangway_proto_rawDescOnce sync.Once
	file_gangway_proto_rawDescData = file_gangway_proto_rawDesc
)

func file_gangway_proto_rawDescGZIP() []byte {
	file_gangway_proto_rawDescOnce.Do(func() {
		file_gangway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gangway_proto_rawDescData)
	})
	return file_gangway_proto_rawDescData
}

var file_gangway_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gangway_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gangway_proto_goTypes = []interface{}{
	(JobExecutionStatus)(0),           // 0: JobExecutionStatus
	(JobExecutionType)(0),             // 1: JobExecutionType
	(*CreateJobExecutionRequest)(nil), // 2: CreateJobExecutionRequest
	(*PodSpecOptions)(nil),            // 3: PodSpecOptions
	(*GetJobExecutionRequest)(nil),    // 4: GetJobExecutionRequest
	(*ListJobExecutionsRequest)(nil),  // 5: ListJobExecutionsRequest
	(*JobExecutions)(nil),             // 6: JobExecutions
	(*JobExecution)(nil),              // 7: JobExecution
	(*Refs)(nil),                      // 8: Refs
	(*Pull)(nil),                      // 9: Pull
	nil,                               // 10: PodSpecOptions.EnvsEntry
	nil,                               // 11: PodSpecOptions.LabelsEntry
	nil,                               // 12: PodSpecOptions.AnnotationsEntry
	(*timestamppb.Timestamp)(nil),     // 13: google.protobuf.Timestamp
}
var file_gangway_proto_depIdxs = []int32{
	1,  // 0: CreateJobExecutionRequest.job_execution_type:type_name -> JobExecutionType
	8,  // 1: CreateJobExecutionRequest.refs:type_name -> Refs
	3,  // 2: CreateJobExecutionRequest.pod_spec_options:type_name -> PodSpecOptions
	10, // 3: PodSpecOptions.envs:type_name -> PodSpecOptions.EnvsEntry
	11, // 4: PodSpecOptions.labels:type_name -> PodSpecOptions.LabelsEntry
	12, // 5: PodSpecOptions.annotations:type_name -> PodSpecOptions.AnnotationsEntry
	0,  // 6: ListJobExecutionsRequest.status:type_name -> JobExecutionStatus
	7,  // 7: JobExecutions.job_execution:type_name -> JobExecution
	1,  // 8: JobExecution.job_type:type_name -> JobExecutionType
	0,  // 9: JobExecution.job_status:type_name -> JobExecutionStatus
	8,  // 10: JobExecution.refs:type_name -> Refs
	3,  // 11: JobExecution.pod_spec_options:type_name -> PodSpecOptions
	13, // 12: JobExecution.create_time:type_name -> google.protobuf.Timestamp
	13, // 13: JobExecution.completion_time:type_name -> google.protobuf.Timestamp
	9,  // 14: Refs.pulls:type_name -> Pull
	2,  // 15: Prow.CreateJobExecution:input_type -> CreateJobExecutionRequest
	4,  // 16: Prow.GetJobExecution:input_type -> GetJobExecutionRequest
	5,  // 17: Prow.ListJobExecutions:input_type -> ListJobExecutionsRequest
	7,  // 18: Prow.CreateJobExecution:output_type -> JobExecution
	7,  // 19: Prow.GetJobExecution:output_type -> JobExecution
	6,  // 20: Prow.ListJobExecutions:output_type -> JobExecutions
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_gangway_proto_init() }
func file_gangway_proto_init() {
	if File_gangway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gangway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpecOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecutions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gangway_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gangway_proto_goTypes,
		DependencyIndexes: file_gangway_proto_depIdxs,
		EnumInfos:         file_gangway_proto_enumTypes,
		MessageInfos:      file_gangway_proto_msgTypes,
	}.Build()
	File_gangway_proto = out.File
	file_gangway_proto_rawDesc = nil
	file_gangway_proto_goTypes = nil
	file_gangway_proto_depIdxs = nil
}

// Code generated by counterfeiter. DO NOT EDIT.
package cherrypickapprovedfakes

import (
	"sync"

	"k8s.io/test-infra/prow/github"
	"k8s.io/test-infra/prow/plugins"
)

type FakeImpl struct {
	AddLabelStub        func(plugins.PluginGitHubClient, string, string, int, string) error
	addLabelMutex       sync.RWMutex
	addLabelArgsForCall []struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}
	addLabelReturns struct {
		result1 error
	}
	addLabelReturnsOnCall map[int]struct {
		result1 error
	}
	GetCombinedStatusStub        func(plugins.PluginGitHubClient, string, string, string) (*github.CombinedStatus, error)
	getCombinedStatusMutex       sync.RWMutex
	getCombinedStatusArgsForCall []struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 string
	}
	getCombinedStatusReturns struct {
		result1 *github.CombinedStatus
		result2 error
	}
	getCombinedStatusReturnsOnCall map[int]struct {
		result1 *github.CombinedStatus
		result2 error
	}
	GetIssueLabelsStub        func(plugins.PluginGitHubClient, string, string, int) ([]github.Label, error)
	getIssueLabelsMutex       sync.RWMutex
	getIssueLabelsArgsForCall []struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
	}
	getIssueLabelsReturns struct {
		result1 []github.Label
		result2 error
	}
	getIssueLabelsReturnsOnCall map[int]struct {
		result1 []github.Label
		result2 error
	}
	RemoveLabelStub        func(plugins.PluginGitHubClient, string, string, int, string) error
	removeLabelMutex       sync.RWMutex
	removeLabelArgsForCall []struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}
	removeLabelReturns struct {
		result1 error
	}
	removeLabelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) AddLabel(arg1 plugins.PluginGitHubClient, arg2 string, arg3 string, arg4 int, arg5 string) error {
	fake.addLabelMutex.Lock()
	ret, specificReturn := fake.addLabelReturnsOnCall[len(fake.addLabelArgsForCall)]
	fake.addLabelArgsForCall = append(fake.addLabelArgsForCall, struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.AddLabelStub
	fakeReturns := fake.addLabelReturns
	fake.recordInvocation("AddLabel", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.addLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) AddLabelCallCount() int {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	return len(fake.addLabelArgsForCall)
}

func (fake *FakeImpl) AddLabelCalls(stub func(plugins.PluginGitHubClient, string, string, int, string) error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = stub
}

func (fake *FakeImpl) AddLabelArgsForCall(i int) (plugins.PluginGitHubClient, string, string, int, string) {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	argsForCall := fake.addLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeImpl) AddLabelReturns(result1 error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	fake.addLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) AddLabelReturnsOnCall(i int, result1 error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	if fake.addLabelReturnsOnCall == nil {
		fake.addLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) GetCombinedStatus(arg1 plugins.PluginGitHubClient, arg2 string, arg3 string, arg4 string) (*github.CombinedStatus, error) {
	fake.getCombinedStatusMutex.Lock()
	ret, specificReturn := fake.getCombinedStatusReturnsOnCall[len(fake.getCombinedStatusArgsForCall)]
	fake.getCombinedStatusArgsForCall = append(fake.getCombinedStatusArgsForCall, struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetCombinedStatusStub
	fakeReturns := fake.getCombinedStatusReturns
	fake.recordInvocation("GetCombinedStatus", []interface{}{arg1, arg2, arg3, arg4})
	fake.getCombinedStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetCombinedStatusCallCount() int {
	fake.getCombinedStatusMutex.RLock()
	defer fake.getCombinedStatusMutex.RUnlock()
	return len(fake.getCombinedStatusArgsForCall)
}

func (fake *FakeImpl) GetCombinedStatusCalls(stub func(plugins.PluginGitHubClient, string, string, string) (*github.CombinedStatus, error)) {
	fake.getCombinedStatusMutex.Lock()
	defer fake.getCombinedStatusMutex.Unlock()
	fake.GetCombinedStatusStub = stub
}

func (fake *FakeImpl) GetCombinedStatusArgsForCall(i int) (plugins.PluginGitHubClient, string, string, string) {
	fake.getCombinedStatusMutex.RLock()
	defer fake.getCombinedStatusMutex.RUnlock()
	argsForCall := fake.getCombinedStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) GetCombinedStatusReturns(result1 *github.CombinedStatus, result2 error) {
	fake.getCombinedStatusMutex.Lock()
	defer fake.getCombinedStatusMutex.Unlock()
	fake.GetCombinedStatusStub = nil
	fake.getCombinedStatusReturns = struct {
		result1 *github.CombinedStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetCombinedStatusReturnsOnCall(i int, result1 *github.CombinedStatus, result2 error) {
	fake.getCombinedStatusMutex.Lock()
	defer fake.getCombinedStatusMutex.Unlock()
	fake.GetCombinedStatusStub = nil
	if fake.getCombinedStatusReturnsOnCall == nil {
		fake.getCombinedStatusReturnsOnCall = make(map[int]struct {
			result1 *github.CombinedStatus
			result2 error
		})
	}
	fake.getCombinedStatusReturnsOnCall[i] = struct {
		result1 *github.CombinedStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetIssueLabels(arg1 plugins.PluginGitHubClient, arg2 string, arg3 string, arg4 int) ([]github.Label, error) {
	fake.getIssueLabelsMutex.Lock()
	ret, specificReturn := fake.getIssueLabelsReturnsOnCall[len(fake.getIssueLabelsArgsForCall)]
	fake.getIssueLabelsArgsForCall = append(fake.getIssueLabelsArgsForCall, struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetIssueLabelsStub
	fakeReturns := fake.getIssueLabelsReturns
	fake.recordInvocation("GetIssueLabels", []interface{}{arg1, arg2, arg3, arg4})
	fake.getIssueLabelsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetIssueLabelsCallCount() int {
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	return len(fake.getIssueLabelsArgsForCall)
}

func (fake *FakeImpl) GetIssueLabelsCalls(stub func(plugins.PluginGitHubClient, string, string, int) ([]github.Label, error)) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = stub
}

func (fake *FakeImpl) GetIssueLabelsArgsForCall(i int) (plugins.PluginGitHubClient, string, string, int) {
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	argsForCall := fake.getIssueLabelsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) GetIssueLabelsReturns(result1 []github.Label, result2 error) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = nil
	fake.getIssueLabelsReturns = struct {
		result1 []github.Label
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetIssueLabelsReturnsOnCall(i int, result1 []github.Label, result2 error) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = nil
	if fake.getIssueLabelsReturnsOnCall == nil {
		fake.getIssueLabelsReturnsOnCall = make(map[int]struct {
			result1 []github.Label
			result2 error
		})
	}
	fake.getIssueLabelsReturnsOnCall[i] = struct {
		result1 []github.Label
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) RemoveLabel(arg1 plugins.PluginGitHubClient, arg2 string, arg3 string, arg4 int, arg5 string) error {
	fake.removeLabelMutex.Lock()
	ret, specificReturn := fake.removeLabelReturnsOnCall[len(fake.removeLabelArgsForCall)]
	fake.removeLabelArgsForCall = append(fake.removeLabelArgsForCall, struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.RemoveLabelStub
	fakeReturns := fake.removeLabelReturns
	fake.recordInvocation("RemoveLabel", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.removeLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) RemoveLabelCallCount() int {
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	return len(fake.removeLabelArgsForCall)
}

func (fake *FakeImpl) RemoveLabelCalls(stub func(plugins.PluginGitHubClient, string, string, int, string) error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = stub
}

func (fake *FakeImpl) RemoveLabelArgsForCall(i int) (plugins.PluginGitHubClient, string, string, int, string) {
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	argsForCall := fake.removeLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeImpl) RemoveLabelReturns(result1 error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = nil
	fake.removeLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) RemoveLabelReturnsOnCall(i int, result1 error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = nil
	if fake.removeLabelReturnsOnCall == nil {
		fake.removeLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	fake.getCombinedStatusMutex.RLock()
	defer fake.getCombinedStatusMutex.RUnlock()
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package testfreezefakes

import (
	"sync"

	"github.com/sirupsen/logrus"
	"k8s.io/test-infra/prow/plugins"
	"k8s.io/test-infra/prow/plugins/testfreeze/checker"
)

type FakeVerifier struct {
	CheckInTestFreezeStub        func(*logrus.Entry) (*checker.Result, error)
	checkInTestFreezeMutex       sync.RWMutex
	checkInTestFreezeArgsForCall []struct {
		arg1 *logrus.Entry
	}
	checkInTestFreezeReturns struct {
		result1 *checker.Result
		result2 error
	}
	checkInTestFreezeReturnsOnCall map[int]struct {
		result1 *checker.Result
		result2 error
	}
	CreateCommentStub        func(plugins.PluginGitHubClient, string, string, int, string) error
	createCommentMutex       sync.RWMutex
	createCommentArgsForCall []struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}
	createCommentReturns struct {
		result1 error
	}
	createCommentReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifier) CheckInTestFreeze(arg1 *logrus.Entry) (*checker.Result, error) {
	fake.checkInTestFreezeMutex.Lock()
	ret, specificReturn := fake.checkInTestFreezeReturnsOnCall[len(fake.checkInTestFreezeArgsForCall)]
	fake.checkInTestFreezeArgsForCall = append(fake.checkInTestFreezeArgsForCall, struct {
		arg1 *logrus.Entry
	}{arg1})
	stub := fake.CheckInTestFreezeStub
	fakeReturns := fake.checkInTestFreezeReturns
	fake.recordInvocation("CheckInTestFreeze", []interface{}{arg1})
	fake.checkInTestFreezeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) CheckInTestFreezeCallCount() int {
	fake.checkInTestFreezeMutex.RLock()
	defer fake.checkInTestFreezeMutex.RUnlock()
	return len(fake.checkInTestFreezeArgsForCall)
}

func (fake *FakeVerifier) CheckInTestFreezeCalls(stub func(*logrus.Entry) (*checker.Result, error)) {
	fake.checkInTestFreezeMutex.Lock()
	defer fake.checkInTestFreezeMutex.Unlock()
	fake.CheckInTestFreezeStub = stub
}

func (fake *FakeVerifier) CheckInTestFreezeArgsForCall(i int) *logrus.Entry {
	fake.checkInTestFreezeMutex.RLock()
	defer fake.checkInTestFreezeMutex.RUnlock()
	argsForCall := fake.checkInTestFreezeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifier) CheckInTestFreezeReturns(result1 *checker.Result, result2 error) {
	fake.checkInTestFreezeMutex.Lock()
	defer fake.checkInTestFreezeMutex.Unlock()
	fake.CheckInTestFreezeStub = nil
	fake.checkInTestFreezeReturns = struct {
		result1 *checker.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) CheckInTestFreezeReturnsOnCall(i int, result1 *checker.Result, result2 error) {
	fake.checkInTestFreezeMutex.Lock()
	defer fake.checkInTestFreezeMutex.Unlock()
	fake.CheckInTestFreezeStub = nil
	if fake.checkInTestFreezeReturnsOnCall == nil {
		fake.checkInTestFreezeReturnsOnCall = make(map[int]struct {
			result1 *checker.Result
			result2 error
		})
	}
	fake.checkInTestFreezeReturnsOnCall[i] = struct {
		result1 *checker.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) CreateComment(arg1 plugins.PluginGitHubClient, arg2 string, arg3 string, arg4 int, arg5 string) error {
	fake.createCommentMutex.Lock()
	ret, specificReturn := fake.createCommentReturnsOnCall[len(fake.createCommentArgsForCall)]
	fake.createCommentArgsForCall = append(fake.createCommentArgsForCall, struct {
		arg1 plugins.PluginGitHubClient
		arg2 string
		arg3 string
		arg4 int
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateCommentStub
	fakeReturns := fake.createCommentReturns
	fake.recordInvocation("CreateComment", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createCommentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVerifier) CreateCommentCallCount() int {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	return len(fake.createCommentArgsForCall)
}

func (fake *FakeVerifier) CreateCommentCalls(stub func(plugins.PluginGitHubClient, string, string, int, string) error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = stub
}

func (fake *FakeVerifier) CreateCommentArgsForCall(i int) (plugins.PluginGitHubClient, string, string, int, string) {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	argsForCall := fake.createCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeVerifier) CreateCommentReturns(result1 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	fake.createCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerifier) CreateCommentReturnsOnCall(i int, result1 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	if fake.createCommentReturnsOnCall == nil {
		fake.createCommentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createCommentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkInTestFreezeMutex.RLock()
	defer fake.checkInTestFreezeMutex.RUnlock()
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

branch-protection:
    # AllowDeletions allows deletion of the protected branch by anyone with write access to the repository.
    allow_deletions: false
    # AllowDisabledJobPolicies allows a branch to choose to opt out of branch protection
    # even if Prow has registered required jobs for that branch.
    allow_disabled_job_policies: false
    # AllowDisabledPolicies allows a child to disable all protection even if the
    # branch has inherited protection options from a parent.
    allow_disabled_policies: false
    # AllowForcePushes permits force pushes to the protected branch by anyone with write access to the repository.
    allow_force_pushes: false
    # Admins overrides whether protections apply to admins if set.
    enforce_admins: false
    # Exclude specifies a set of regular expressions which identify branches
    # that should be excluded from the protection policy, mutually exclusive with Include
    exclude:
        - ""
    # Include specifies a set of regular expressions which identify branches
    # that should be included from the protection policy, mutually exclusive with Exclude
    include:
        - ""
    # Orgs holds branch protection options for orgs by name
    orgs:
        "":
            # AllowDeletions allows deletion of the protected branch by anyone with write access to the repository.
            allow_deletions: false
            # AllowForcePushes permits force pushes to the protected branch by anyone with write access to the repository.
            allow_force_pushes: false
            # Admins overrides whether protections apply to admins if set.
            enforce_admins: false
            # Exclude specifies a set of regular expressions which identify branches
            # that should be excluded from the protection policy, mutually exclusive with Include
            exclude:
                - ""
            # Include specifies a set of regular expressions which identify branches
            # that should be included from the protection policy, mutually exclusive with Exclude
            include:
                - ""
            # Protect overrides whether branch protection is enabled if set.
            protect: false
            repos:
                "":
                    # AllowDeletions allows deletion of the protected branch by anyone with write access to the repository.
                    allow_deletions: false
                    # AllowForcePushes permits force pushes to the protected branch by anyone with write access to the repository.
                    allow_force_pushes: false
                    branches:
                        "":
                            # AllowDeletions allows deletion of the protected branch by anyone with write access to the repository.
                            allow_deletions: false
                            # AllowForcePushes permits force pushes to the protected branch by anyone with write access to the repository.
                            allow_force_pushes: false
                            # Admins overrides whether protections apply to admins if set.
                            enforce_admins: false
                            # Exclude specifies a set of regular expressions which identify branches
                            # that should be excluded from the protection policy, mutually exclusive with Include
                            exclude:
                                - ""
                            # Include specifies a set of regular expressions which identify branches
                            # that should be included from the protection policy, mutually exclusive with Exclude
                            include:
                                - ""
                            # Protect overrides whether branch protection is enabled if set.
                            protect: false
                            # RequireManuallyTriggeredJobs enforces a context presence when job runs conditionally, but not automatically,
                            # that results in params always_run: false, optional: false, and skip_if_only_change, run_if_changed not present.
                            require_manually_triggered_jobs: false
                            # RequiredLinearHistory enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
                            required_linear_history: false
                            # RequiredPullRequestReviews specifies github approval/review criteria.
                            required_pull_request_reviews:
                                # BypassRestrictions appends users/teams that are allowed to bypass PR restrictions
                                bypass_pull_request_allowances:
                                    teams:
                                        - ""
                                    users:
                                        - ""
                                # DismissStale overrides whether new commits automatically dismiss old reviews if set
                                dismiss_stale_reviews: false
                                # DismissalRestrictions appends users/teams that are allowed to merge
                                dismissal_restrictions:
                                    teams:
                                        - ""
                                    users:
                                        - ""
                                # RequireOwners overrides whether CODEOWNERS must approve PRs if set
                                require_code_owner_reviews: false
                                # Approvals overrides the number of approvals required if set (set to 0 to disable)
                                required_approving_review_count: 0
                            # RequiredStatusChecks configures github contexts
                            required_status_checks:
                                # Contexts appends required contexts that must be green to merge
                                contexts:
                                    - ""
                                # Strict overrides whether new commits in the base branch require updating the PR if set
                                strict: false
                            # Restrictions limits who can merge
                            restrictions:
                                apps:
                                    - ""
                                teams:
                                    - ""
                                users:
                                    - ""
                            # Unmanaged makes us not manage the branchprotection.
                            unmanaged: false
                    # Admins overrides whether protections apply to admins if set.
                    enforce_admins: false
                    # Exclude specifies a set of regular expressions which identify branches
                    # that should be excluded from the protection policy, mutually exclusive with Include
                    exclude:
                        - ""
                    # Include specifies a set of regular expressions which identify branches
                    # that should be included from the protection policy, mutually exclusive with Exclude
                    include:
                        - ""
                    # Protect overrides whether branch protection is enabled if set.
                    protect: false
                    # RequireManuallyTriggeredJobs enforces a context presence when job runs conditionally, but not automatically,
                    # that results in params always_run: false, optional: false, and skip_if_only_change, run_if_changed not present.
                    require_manually_triggered_jobs: false
                    # RequiredLinearHistory enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
                    required_linear_history: false
                    # RequiredPullRequestReviews specifies github approval/review criteria.
                    required_pull_request_reviews:
                        # BypassRestrictions appends users/teams that are allowed to bypass PR restrictions
                        bypass_pull_request_allowances:
                            teams:
                                - ""
                            users:
                                - ""
                        # DismissStale overrides whether new commits automatically dismiss old reviews if set
                        dismiss_stale_reviews: false
                        # DismissalRestrictions appends users/teams that are allowed to merge
                        dismissal_restrictions:
                            teams:
                                - ""
                            users:
                                - ""
                        # RequireOwners overrides whether CODEOWNERS must approve PRs if set
                        require_code_owner_reviews: false
                        # Approvals overrides the number of approvals required if set (set to 0 to disable)
                        required_approving_review_count: 0
                    # RequiredStatusChecks configures github contexts
                    required_status_checks:
                        # Contexts appends required contexts that must be green to merge
                        contexts:
                            - ""
                        # Strict overrides whether new commits in the base branch require updating the PR if set
                        strict: false
                    # Restrictions limits who can merge
                    restrictions:
                        apps:
                            - ""
                        teams:
                            - ""
                        users:
                            - ""
                    # Unmanaged makes us not manage the branchprotection.
                    unmanaged: false
            # RequireManuallyTriggeredJobs enforces a context presence when job runs conditionally, but not automatically,
            # that results in params always_run: false, optional: false, and skip_if_only_change, run_if_changed not present.
            require_manually_triggered_jobs: false
            # RequiredLinearHistory enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
            required_linear_history: false
            # RequiredPullRequestReviews specifies github approval/review criteria.
            required_pull_request_reviews:
                # BypassRestrictions appends users/teams that are allowed to bypass PR restrictions
                bypass_pull_request_allowances:
                    teams:
                        - ""
                    users:
                        - ""
                # DismissStale overrides whether new commits automatically dismiss old reviews if set
                dismiss_stale_reviews: false
                # DismissalRestrictions appends users/teams that are allowed to merge
                dismissal_restrictions:
                    teams:
                        - ""
                    users:
                        - ""
                # RequireOwners overrides whether CODEOWNERS must approve PRs if set
                require_code_owner_reviews: false
                # Approvals overrides the number of approvals required if set (set to 0 to disable)
                required_approving_review_count: 0
            # RequiredStatusChecks configures github contexts
            required_status_checks:
                # Contexts appends required contexts that must be green to merge
                contexts:
                    - ""
                # Strict overrides whether new commits in the base branch require updating the PR if set
                strict: false
            # Restrictions limits who can merge
            restrictions:
                apps:
                    - ""
                teams:
                    - ""
                users:
                    - ""
            # Unmanaged makes us not manage the branchprotection.
            unmanaged: false
    # Protect overrides whether branch protection is enabled if set.
    protect: false
    # ProtectTested determines if branch protection rules are set for all repos
    # that Prow has registered jobs for, regardless of if those repos are in the
    # branch protection config.
    protect-tested-repos: false
    # ProtectReposWithOptionalJobs will make the Branchprotector manage required status
    # contexts on repositories that only have optional jobs (default: false)
    protect_repos_with_optional_jobs: false
    # RequireManuallyTriggeredJobs enforces a context presence when job runs conditionally, but not automatically,
    # that results in params always_run: false, optional: false, and skip_if_only_change, run_if_changed not present.
    require_manually_triggered_jobs: false
    # RequiredLinearHistory enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
    required_linear_history: false
    # RequiredPullRequestReviews specifies github approval/review criteria.
    required_pull_request_reviews:
        # BypassRestrictions appends users/teams that are allowed to bypass PR restrictions
        bypass_pull_request_allowances:
            teams:
                - ""
            users:
                - ""
        # DismissStale overrides whether new commits automatically dismiss old reviews if set
        dismiss_stale_reviews: false
        # DismissalRestrictions appends users/teams that are allowed to merge
        dismissal_restrictions:
            teams:
                - ""
            users:
                - ""
        # RequireOwners overrides whether CODEOWNERS must approve PRs if set
        require_code_owner_reviews: false
        # Approvals overrides the number of approvals required if set (set to 0 to disable)
        required_approving_review_count: 0
    # RequiredStatusChecks configures github contexts
    required_status_checks:
        # Contexts appends required contexts that must be green to merge
        contexts:
            - ""
        # Strict overrides whether new commits in the base branch require updating the PR if set
        strict: false
    # Restrictions limits who can merge
    restrictions:
        apps:
            - ""
        teams:
            - ""
        users:
            - ""
    # Unmanaged makes us not manage the branchprotection.
    unmanaged: false
# The git sha from which this config was generated.
config_version_sha: ' '
deck:
    # AdditionalAllowedBuckets is a list of storage buckets to allow in artifact requests
    # (in addition to those listed in the GCSConfiguration).
    # Setting this field requires "SkipStoragePathValidation" also be set to `false`.
    additional_allowed_buckets:
        - ""
    # Branding of the frontend
    branding:
        # BackgroundColor is the color of the background.
        background_color: ' '
        # Favicon is the location of the favicon that will be loaded in deck.
        favicon: ' '
        # HeaderColor is the color of the header.
        header_color: ' '
        # Logo is the location of the logo that will be loaded in deck.
        logo: ' '
    # DefaultRerunAuthConfigs is a list of DefaultRerunAuthConfigEntry structures that specify who can
    # trigger job reruns. Reruns are based on whether the entry's org/repo or cluster matches with the
    # expected fields in the given configuration.

    # Each entry in the slice specifies Repo and Cluster regexp filter fields to
    # match against jobs and a corresponding RerunAuthConfig. The entry matching the job with the
    # most specification is for authentication purposes.

    # This field is smarter than the RerunAuthConfigs, because each
    # entry includes additional Cluster regexp information that the old format
    # does not consider.

    # This field is mutually exclusive with the RerunAuthConfigs field.
    default_rerun_auth_configs:
        - # Cluster matches against the cluster alias of the build cluster that the
          # ProwJob is configured to run on. Recall that ProwJobs default to running on
          # the "default" build cluster if they omit the "cluster" field in config.
          cluster: ' '
          # OrgRepo matches against the "org" or "org/repo" that the presubmit or postsubmit
          # is associated with. If the job is a periodic, extra_refs[0] is used. If the
          # job is a periodic without extra_refs, the empty string will be used.
          # If this field is omitted all jobs will match.
          repo: ' '
          # Config is the RerunAuthConfig to apply if the filter fields all match the
          # ProwJob. Note that when multiple entries match a ProwJob the entry with the
          # highest specification is used.
          rerun_auth_configs:
            # If AllowAnyone is set to true, any user can rerun the job
            allow_anyone: true
            # GitHubOrgs contains names of GitHub organizations whose members can rerun the job
            github_orgs:
                - ""
            # GitHubTeams contains IDs of GitHub teams of users who can rerun the job
            # If you know the name of a team and the org it belongs to,
            # you can look up its ID using this command, where the team slug is the hyphenated name:
            # curl -H "Authorization: token <token>" "https://api.github.com/orgs/<org-name>/teams/<team slug>"
            # or, to list all teams in a given org, use
            # curl -H "Authorization: token <token>" "https://api.github.com/orgs/<org-name>/teams"
            github_team_ids:
                - 0
            # GitHubTeamSlugs contains slugs and orgs of teams of users who can rerun the job
            github_team_slugs:
                - org: ' '
                  slug: ' '
            # GitHubUsers contains names of individual users who can rerun the job
            github_users:
                - ""
    # ExternalAgentLogs ensures external agents can expose
    # their logs in prow.
    external_agent_logs:
        - # Agent is an external prow agent that supports exposing
          # logs via deck.
          agent: ' '
          # SelectorString compiles into Selector at load time.
          selector: ' '
          # URLTemplateString compiles into URLTemplate at load time.
          url_template: ' '
    # GoogleAnalytics, if specified, include a Google Analytics tracking code on each page.
    google_analytics: ' '
    # HiddenRepos is a list of orgs and/or repos that should not be displayed by Deck.
    hidden_repos:
        - ""
    # RerunAuthConfigs is not deprecated but DefaultRerunAuthConfigs should be used in favor.
    # It remains a part of Deck for the purposes of backwards compatibility.
    # RerunAuthConfigs is a map of configs that specify who is able to trigger job reruns. The field
    # accepts a key of: `org/repo`, `org` or `*` (wildcard) to define what GitHub org (or repo) a particular
    # config applies to and a value of: `RerunAuthConfig` struct to define the users/groups authorized to rerun jobs.
    rerun_auth_configs:
        "":
            allow_anyone: true
            github_orgs:
                - ""
            github_team_ids:
                - 0
            github_team_slugs:
                - org: ' '
                  slug: ' '
            github_users:
                - ""
    # SkipStoragePathValidation skips validation that restricts artifact requests to specific buckets.
    # By default, buckets listed in the GCSConfiguration are automatically allowed.
    # Additional locations can be allowed via `AdditionalAllowedBuckets` fields.
    # When unspecified (nil), it defaults to false
    skip_storage_path_validation: false
    # Spyglass specifies which viewers will be used for which artifacts when viewing a job in Deck.
    spyglass:
        # If set, Announcement is used as a Go HTML template string to be displayed at the top of
        # each spyglass page. Using HTML in the template is acceptable.
        # Currently the only variable available is .ArtifactPath, which contains the GCS path for the job artifacts.
        announcement: ' '
        # GCSBrowserPrefix is used to generate a link to a human-usable GCS browser.
        # If left empty, the link will be not be shown. Otherwise, a GCS path (with no
        # prefix or scheme) will be appended to GCSBrowserPrefix and shown to the user.
        gcs_browser_prefix: ' '
        # GCSBrowserPrefixesByRepo are used to generate a link to a human-usable GCS browser.
        # They are mapped by org, org/repo or '*' which is the default value.
        # These are the most specific and will override GCSBrowserPrefixesByBucket if both are resolved.
        gcs_browser_prefixes:
            "": ""
        # GCSBrowserPrefixesByBucket are used to generate a link to a human-usable GCS browser.
        # They are mapped by bucket name or '*' which is the default value.
        # They will only be utilized if there is not a GCSBrowserPrefixesByRepo for the org/repo.
        gcs_browser_prefixes_by_bucket:
            "": ""
        # HidePRHistLink allows prow hiding PR History link from deck, this is handy especially for
        # prow instances that only serves gerrit.
        # This might become obsolete once https://github.com/kubernetes/test-infra/issues/24130 is fixed.
        hide_pr_history_link: true
        # Lenses is a list of lens configurations.
        lenses:
            - # Lens is the lens to use, alongside any lens-specific configuration.
              lens:
                # Name is the name of the lens.
                name: ' '
              # OptionalFiles is a list of regexes of file paths that will be provided to the lens if they are
              # present, but will not preclude the lens being rendered by their absence.
              # The list entries are ORed together, so if only one of them is present it will be provided to
              # the lens even if the others are not.
              optional_files:
                - ""
              # RemoteConfig specifies how to access remote lenses.
              remote_config:
                # The endpoint for the lense.
                endpoint: ' '
                # HideTitle defines if we will keep showing the title after lens loads.
                hide_title: false
                # Priority for lens ordering, lowest priority first.
                priority: 0
                # The endpoint for static resources.
                static_root: ' '
                # The human-readable title for the lens.
                title: ' '
              # RequiredFiles is a list of regexes of file paths that must all be present for a lens to appear.
              # The list entries are ANDed together, i.e. all of them are required. You can achieve an OR
              # by using a pipe in a regex.
              required_files:
                - ""
        # PRHistLinkTemplate is the template for constructing href of `PR History` button,
        # by default it's "/pr-history?org={{.Org}}&repo={{.Repo}}&pr={{.Number}}"
        pr_history_link_template: ' '
        # TestGridConfig is the path to the TestGrid config proto. If the path begins with
        # "gs://" it is assumed to be a GCS reference, otherwise it is read from the local filesystem.
        # If left blank, TestGrid links will not appear.
        testgrid_config: ' '
        # TestGridRoot is the root URL to the TestGrid frontend, e.g. "https://testgrid.k8s.io/".
        # If left blank, TestGrid links will not appear.
        testgrid_root: ' '
        # Viewers is deprecated, prefer Lenses instead.
        # Viewers was a map of Regexp strings to viewer names that defines which sets
        # of artifacts need to be consumed by which viewers. It is copied in to Lenses at load time.
        viewers:
            "": null
    # TideUpdatePeriod specifies how often Deck will fetch status from Tide. Defaults to 10s.
    tide_update_period: 0s
# DefaultJobTimeout this is default deadline for prow jobs. This value is used when
# no timeout is configured at the job level. This value is set to 24 hours.
default_job_timeout: 0s
# DisabledClusters holds a list of disabled build cluster names. The same context names will be ignored while
# Prow components load the kubeconfig files.
disabled_clusters:
    - ""
# Gangway contains configurations needed by the the Prow API server of the
# same name. It encodes an allowlist of API clients and what kinds of Prow
# Jobs they are authorized to trigger.
gangway:
    # AllowedApiClients encodes identifying information about API clients
    # (AllowedApiClient). An AllowedApiClient has authority to trigger a subset
    # of Prow Jobs.
    allowed_api_clients:
        - # AllowedJobsFilters contains information about what kinds of Prow jobs this
          # API client is authorized to trigger.
          allowed_jobs_filters:
            - tenant_id: ' '
          # ApiClientGcp contains GoogleCloudPlatform details about a web API client.
          # We currently only support GoogleCloudPlatform but other cloud vendors are
          # possible as additional fields in this struct.
          gcp:
            # EndpointApiConsumerNumber is the expected value of the
            # x-endpoint-api-consumer-number HTTP metadata header. Typically this
            # encodes the GCP Project number value, which uniquely identifies a GCP
            # Project.
            endpoint_api_consumer_number: ' '
            # EndpointApiConsumerType is the expected value of the
            # x-endpoint-api-consumer-type HTTP metadata header. Typically this will be
            # "PROJECT".
            endpoint_api_consumer_type: ' '
gerrit:
    allowed_presubmit_trigger_re: ' '
    # DeckURL is the root URL of Deck. This is used to construct links to
    # job runs for a given CL.
    deck_url: ' '
    org_repos_config: null
    # TickInterval is how often we do a sync with bound gerrit instance.
    tick_interval: 0s
# GitHubOptions allows users to control how prow applications display GitHub website links.
github:
    # LinkURLFromConfig is the string representation of the link_url config parameter.
    # This config parameter allows users to override the default GitHub link url for all plugins.
    # If this option is not set, we assume "https://github.com".
    link_url: ' '
github_reporter:
    # JobTypesToReport is used to determine which type of prowjob
    # should be reported to github.

    # defaults to both presubmit and postsubmit jobs.
    job_types_to_report:
        - ""
    # NoCommentRepos is a list of orgs and org/repos for which failure report
    # comments should not be maintained. Status contexts will still be written.
    no_comment_repos:
        - ""
    # SummaryCommentRepos is a list of orgs and org/repos for which failure report
    # comments is only sent when all jobs from current SHA are finished. Status
    # contexts will still be written.
    summary_comment_repos:
        - ""
horologium:
    # TickInterval is the interval in which we check if new jobs need to be
    # created. Defaults to one minute.
    tick_interval: 0s
in_repo_config:
    # AllowedClusters is a list of allowed clusternames that can be used for jobs on
    # a given repo. All clusters that are allowed for the specific repo, its org or
    # globally can be used.
    allowed_clusters:
        "": null
    # Enabled describes whether InRepoConfig is enabled for a given repository. This can
    # be set globally, per org or per repo using '*', 'org' or 'org/repo' as key. The
    # narrowest match always takes precedence.
    enabled:
        "": false
jenkins_operators:
    - # JobURLTemplateString compiles into JobURLTemplate at load time.
      job_url_template: ' '
      # LabelSelectorString compiles into LabelSelector at load time.
      # If set, this option needs to match --label-selector used by
      # the desired jenkins-operator. This option is considered
      # invalid when provided with a single jenkins-operator config.

      # For label selector syntax, see below:
      # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      label_selector: ' '
      # ReportTemplateString compiles into ReportTemplate at load time.
      report_template: ' '
      # ReportTemplateStrings is a mapping of template comments.
      # Use `org/repo`, `org` or `*` as a key.
      report_templates:
        "": ""
# LogLevel enables dynamically updating the log level of the
# standard logger that is used by all prow components.

# Valid values:

# "debug", "info", "warn", "warning", "error", "fatal", "panic"

# Defaults to "info".
log_level: ' '
# ManagedWebhooks contains information about all github repositories and organizations which are using
# non-global Hmac token.
managed_webhooks:
    # Controls whether org/repo invitation for prow bot should be automatically
    # accepted or not. Only admin level invitations related to orgs and repos
    # in the managed_webhooks config will be accepted and all other invitations
    # will be left pending.
    auto_accept_invitation: false
    org_repo_config:
        "":
            token_created_after: "0001-01-01T00:00:00Z"
    respect_legacy_global_token: false
# Moonraker contains configurations for Moonraker, such as the client
# timeout to use for all Prow services that need to send requests to
# Moonraker.
moonraker:
    client_timeout: 0s
# OwnersDirDenylist is used to configure regular expressions matching directories
# to ignore when searching for OWNERS{,_ALIAS} files in a repo.
owners_dir_denylist:
    # Default configures a default denylist for all repos (or orgs).
    # Some directories like ".git", "_output" and "vendor/.*/OWNERS"
    # are already preconfigured to be denylisted, and need not be included here.
    default:
        - ""
    # By default, some directories like ".git", "_output" and "vendor/.*/OWNERS"
    # are preconfigured to be denylisted.
    # If set, IgnorePreconfiguredDefaults will not add these preconfigured directories
    # to the denylist.
    ignore_preconfigured_defaults: true
    # Repos configures a directory denylist per repo (or org).
    repos:
        "": null
plank:
    # BuildClusterStatusFile is an optional field used to specify the blob storage location
    # to publish cluster status information.
    # e.g. gs://my-bucket/cluster-status.json
    build_cluster_status_file: ' '
    # DefaultDecorationConfigEntries is used to populate DefaultDecorationConfigs.

    # Each entry in the slice specifies Repo and Cluster regexp filter fields to
    # match against jobs and a corresponding DecorationConfig. All entries that
    # match a job are used. Later matching entries override the fields of earlier
    # matching entries.

    # This field is smarter than the DefaultDecorationConfigsMap, because each
    # entry includes additional Cluster regexp information that the old format
    # does not consider.

    # This field is mutually exclusive with the DefaultDecorationConfigsMap field.
    default_decoration_config_entries:
        - # Cluster matches against the cluster alias of the build cluster that the
          # ProwJob is configured to run on. Recall that ProwJobs default to running on
          # the "default" build cluster if they omit the "cluster" field in config.
          cluster: ' '
          # Config is the DecorationConfig to apply if the filter fields all match the
          # ProwJob. Note that when multiple entries match a ProwJob they are all used
          # by sequentially merging with later entries overriding fields from earlier
          # entries.
          config:
            # CensorSecrets enables censoring output logs and artifacts.
            censor_secrets: false
            # CensoringOptions exposes options for censoring output logs and artifacts.
            censoring_options:
                # CensoringBufferSize is the size in bytes of the buffer allocated for every file
                # being censored. We want to keep as little of the file in memory as possible in
                # order for censoring to be reasonably performant in space. However, to guarantee
                # that we censor every instance of every secret, our buffer size must be at least
                # two times larger than the largest secret we are about to censor. While that size
                # is the smallest possible buffer we could use, if the secrets being censored are
                # small, censoring will not be performant as the number of I/O actions per file
                # would increase. If unset, defaults to 10MiB.
                censoring_buffer_size: 0
                # CensoringConcurrency is the maximum number of goroutines that should be censoring
                # artifacts and logs at any time. If unset, defaults to 10.
                censoring_concurrency: 0
                # ExcludeDirectories are directories which should not have their content censored. If
                # present, content in these directories will not be censored even if the directory also
                # matches a glob in IncludeDirectories. Entries in this list are relative to $ARTIFACTS,
                # and are parsed with the go-zglob library, allowing for globbed matches.
                exclude_directories:
                    - ""
                # IncludeDirectories are directories which should have their content censored. If
                # present, only content in these directories will be censored. Entries in this list
                # are relative to $ARTIFACTS and are parsed with the go-zglob library, allowing for
                # globbed matches.
                include_directories:
                    - ""
            # CookieFileSecret is the name of a kubernetes secret that contains
            # a git http.cookiefile, which should be used during the cloning process.
            cookiefile_secret: ""
            # DefaultMemoryRequest is the default requested memory on a test container.
            # If SetLimitEqualsMemoryRequest is also true then the Limit will also be
            # set the same as this request. Could be overridden by memory request
            # defined explicitly on prowjob.
            default_memory_request: "0"
            # DefaultServiceAccountName is the name of the Kubernetes service account
            # that should be used by the pod if one is not specified in the podspec.
            default_service_account_name: ""
            # FsGroup defines special supplemental group ID used in all containers in a Pod.
            # This allows to change the ownership of particular volumes by kubelet.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's FsGroup
            fs_group: 0
            # GCSConfiguration holds options for pushing logs and
            # artifacts to GCS from a job.
            gcs_configuration:
                # Bucket is the bucket to upload to, it can be:
                # * a GCS bucket: with gs:// prefix
                # * a S3 bucket: with s3:// prefix
                # * a GCS bucket: without a prefix (deprecated, it's discouraged to use Bucket without prefix please add the gs:// prefix)
                bucket: ' '
                # DefaultOrg is omitted from GCS paths when using the
                # legacy or simple strategy
                default_org: ' '
                # DefaultRepo is omitted from GCS paths when using the
                # legacy or simple strategy
                default_repo: ' '
                # JobURLPrefix holds the baseURL under which the jobs output can be viewed.
                # If unset, this will be derived based on org/repo from the job_url_prefix_config.
                job_url_prefix: ' '
                # LocalOutputDir specifies a directory where files should be copied INSTEAD of uploading to blob storage.
                # This option is useful for testing jobs that use the pod-utilities without actually uploading.
                local_output_dir: ' '
                # MediaTypes holds additional extension media types to add to Go's
                # builtin's and the local system's defaults. This maps extensions
                # to media types, for example: MediaTypes["log"] = "text/plain"
                mediaTypes:
                    "": ""
                # PathPrefix is an optional path that follows the
                # bucket name and comes before any structure
                path_prefix: ' '
                # PathStrategy dictates how the org and repo are used
                # when calculating the full path to an artifact in GCS
                path_strategy: ' '
            # GCSCredentialsSecret is the name of the Kubernetes secret
            # that holds GCS push credentials.
            gcs_credentials_secret: ""
            # GitHubAPIEndpoints are the endpoints of GitHub APIs.
            github_api_endpoints:
                - ""
            # GitHubAppID is the ID of GitHub App, which is going to be used for fetching a private
            # repository.
            github_app_id: ' '
            # GitHubAppPrivateKeySecret is a Kubernetes secret that contains the GitHub App private key,
            # which is going to be used for fetching a private repository.
            github_app_private_key_secret:
                # Key is the key of the corresponding kubernetes secret that
                # holds the value of the GitHub App private key.
                key: ' '
                # Name is the name of a kubernetes secret.
                name: ' '
            # GracePeriod is how long the pod utilities will wait
            # after sending SIGINT to send SIGKILL when aborting
            # a job. Only applicable if decorating the PodSpec.
            grace_period: 0s
            # OauthTokenSecret is a Kubernetes secret that contains the OAuth token,
            # which is going to be used for fetching a private repository.
            oauth_token_secret:
                # Key is the key of the corresponding kubernetes secret that
                # holds the value of the OAuth token.
                key: ' '
                # Name is the name of a kubernetes secret.
                name: ' '
            # PodPendingTimeout defines how long the controller will wait to perform garbage
            # collection on pending pods. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_pending_timeout: 0s
            # PodRunningTimeout defines how long the controller will wait to abort a prowjob pod
            # stuck in running state. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_running_timeout: 0s
            # PodUnscheduledTimeout defines how long the controller will wait to abort a prowjob
            # stuck in an unscheduled state. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_unscheduled_timeout: 0s
            # Resources holds resource requests and limits for utility
            # containers used to decorate a PodSpec.
            resources:
                clonerefs:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                initupload:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                place_entrypoint:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                sidecar:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
            # RunAsGroup defines GID of process in all containers running in a Pod.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's RunAsGroup
            run_as_group: 0
            # RunAsUser defines UID for process in all containers running in a Pod.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's RunAsUser
            run_as_user: 0
            # S3CredentialsSecret is the name of the Kubernetes secret
            # that holds blob storage push credentials.
            s3_credentials_secret: ""
            # SetLimitEqualsMemoryRequest sets memory limit equal to request.
            set_limit_equals_memory_request: false
            # SkipCloning determines if we should clone source code in the
            # initcontainers for jobs that specify refs
            skip_cloning: false
            # SSHHostFingerprints are the fingerprints of known SSH hosts
            # that the cloning process can trust.
            # Create with ssh-keyscan [-t rsa] host
            ssh_host_fingerprints:
                - ""
            # SSHKeySecrets are the names of Kubernetes secrets that contain
            # SSK keys which should be used during the cloning process.
            ssh_key_secrets:
                - ""
            # Timeout is how long the pod utilities will wait
            # before aborting a job with SIGINT.
            timeout: 0s
            # UploadIgnoresInterrupts causes sidecar to ignore interrupts for the upload process in
            # hope that the test process exits cleanly before starting an upload.
            upload_ignores_interrupts: false
            # UtilityImages holds pull specs for utility container
            # images used to decorate a PodSpec.
            utility_images:
                # CloneRefs is the pull spec used for the clonerefs utility
                clonerefs: ' '
                # Entrypoint is the pull spec used for the entrypoint utility
                entrypoint: ' '
                # InitUpload is the pull spec used for the initupload utility
                initupload: ' '
                # sidecar is the pull spec used for the sidecar utility
                sidecar: ' '
          # OrgRepo matches against the "org" or "org/repo" that the presubmit or postsubmit
          # is associated with. If the job is a periodic, extra_refs[0] is used. If the
          # job is a periodic without extra_refs, the empty string will be used.
          # If this field is omitted all jobs will match.
          repo: ' '
    # DefaultDecorationConfigsMap is a mapping from 'org', 'org/repo', or the
    # literal string '*', to the default decoration config to use for that key.
    # The '*' key matches all jobs. (Periodics use extra_refs[0] for matching
    # if present.)

    # This field is mutually exclusive with the DefaultDecorationConfigEntries field.
    default_decoration_configs:
        "":
            # CensorSecrets enables censoring output logs and artifacts.
            censor_secrets: false
            # CensoringOptions exposes options for censoring output logs and artifacts.
            censoring_options:
                # CensoringBufferSize is the size in bytes of the buffer allocated for every file
                # being censored. We want to keep as little of the file in memory as possible in
                # order for censoring to be reasonably performant in space. However, to guarantee
                # that we censor every instance of every secret, our buffer size must be at least
                # two times larger than the largest secret we are about to censor. While that size
                # is the smallest possible buffer we could use, if the secrets being censored are
                # small, censoring will not be performant as the number of I/O actions per file
                # would increase. If unset, defaults to 10MiB.
                censoring_buffer_size: 0
                # CensoringConcurrency is the maximum number of goroutines that should be censoring
                # artifacts and logs at any time. If unset, defaults to 10.
                censoring_concurrency: 0
                # ExcludeDirectories are directories which should not have their content censored. If
                # present, content in these directories will not be censored even if the directory also
                # matches a glob in IncludeDirectories. Entries in this list are relative to $ARTIFACTS,
                # and are parsed with the go-zglob library, allowing for globbed matches.
                exclude_directories:
                    - ""
                # IncludeDirectories are directories which should have their content censored. If
                # present, only content in these directories will be censored. Entries in this list
                # are relative to $ARTIFACTS and are parsed with the go-zglob library, allowing for
                # globbed matches.
                include_directories:
                    - ""
            # CookieFileSecret is the name of a kubernetes secret that contains
            # a git http.cookiefile, which should be used during the cloning process.
            cookiefile_secret: ""
            # DefaultMemoryRequest is the default requested memory on a test container.
            # If SetLimitEqualsMemoryRequest is also true then the Limit will also be
            # set the same as this request. Could be overridden by memory request
            # defined explicitly on prowjob.
            default_memory_request: "0"
            # DefaultServiceAccountName is the name of the Kubernetes service account
            # that should be used by the pod if one is not specified in the podspec.
            default_service_account_name: ""
            # FsGroup defines special supplemental group ID used in all containers in a Pod.
            # This allows to change the ownership of particular volumes by kubelet.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's FsGroup
            fs_group: 0
            # GCSConfiguration holds options for pushing logs and
            # artifacts to GCS from a job.
            gcs_configuration:
                # Bucket is the bucket to upload to, it can be:
                # * a GCS bucket: with gs:// prefix
                # * a S3 bucket: with s3:// prefix
                # * a GCS bucket: without a prefix (deprecated, it's discouraged to use Bucket without prefix please add the gs:// prefix)
                bucket: ' '
                # DefaultOrg is omitted from GCS paths when using the
                # legacy or simple strategy
                default_org: ' '
                # DefaultRepo is omitted from GCS paths when using the
                # legacy or simple strategy
                default_repo: ' '
                # JobURLPrefix holds the baseURL under which the jobs output can be viewed.
                # If unset, this will be derived based on org/repo from the job_url_prefix_config.
                job_url_prefix: ' '
                # LocalOutputDir specifies a directory where files should be copied INSTEAD of uploading to blob storage.
                # This option is useful for testing jobs that use the pod-utilities without actually uploading.
                local_output_dir: ' '
                # MediaTypes holds additional extension media types to add to Go's
                # builtin's and the local system's defaults. This maps extensions
                # to media types, for example: MediaTypes["log"] = "text/plain"
                mediaTypes:
                    "": ""
                # PathPrefix is an optional path that follows the
                # bucket name and comes before any structure
                path_prefix: ' '
                # PathStrategy dictates how the org and repo are used
                # when calculating the full path to an artifact in GCS
                path_strategy: ' '
            # GCSCredentialsSecret is the name of the Kubernetes secret
            # that holds GCS push credentials.
            gcs_credentials_secret: ""
            # GitHubAPIEndpoints are the endpoints of GitHub APIs.
            github_api_endpoints:
                - ""
            # GitHubAppID is the ID of GitHub App, which is going to be used for fetching a private
            # repository.
            github_app_id: ' '
            # GitHubAppPrivateKeySecret is a Kubernetes secret that contains the GitHub App private key,
            # which is going to be used for fetching a private repository.
            github_app_private_key_secret:
                # Key is the key of the corresponding kubernetes secret that
                # holds the value of the GitHub App private key.
                key: ' '
                # Name is the name of a kubernetes secret.
                name: ' '
            # GracePeriod is how long the pod utilities will wait
            # after sending SIGINT to send SIGKILL when aborting
            # a job. Only applicable if decorating the PodSpec.
            grace_period: 0s
            # OauthTokenSecret is a Kubernetes secret that contains the OAuth token,
            # which is going to be used for fetching a private repository.
            oauth_token_secret:
                # Key is the key of the corresponding kubernetes secret that
                # holds the value of the OAuth token.
                key: ' '
                # Name is the name of a kubernetes secret.
                name: ' '
            # PodPendingTimeout defines how long the controller will wait to perform garbage
            # collection on pending pods. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_pending_timeout: 0s
            # PodRunningTimeout defines how long the controller will wait to abort a prowjob pod
            # stuck in running state. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_running_timeout: 0s
            # PodUnscheduledTimeout defines how long the controller will wait to abort a prowjob
            # stuck in an unscheduled state. Specific for OrgRepo or Cluster. If not set, it has a fallback inside plank field.
            pod_unscheduled_timeout: 0s
            # Resources holds resource requests and limits for utility
            # containers used to decorate a PodSpec.
            resources:
                clonerefs:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                initupload:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                place_entrypoint:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
                sidecar:
                    limits:
                        "": "0"
                    requests:
                        "": "0"
            # RunAsGroup defines GID of process in all containers running in a Pod.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's RunAsGroup
            run_as_group: 0
            # RunAsUser defines UID for process in all containers running in a Pod.
            # This field will not override the existing ProwJob's PodSecurityContext.
            # Equivalent to PodSecurityContext's RunAsUser
            run_as_user: 0
            # S3CredentialsSecret is the name of the Kubernetes secret
            # that holds blob storage push credentials.
            s3_credentials_secret: ""
            # SetLimitEqualsMemoryRequest sets memory limit equal to request.
            set_limit_equals_memory_request: false
            # SkipCloning determines if we should clone source code in the
            # initcontainers for jobs that specify refs
            skip_cloning: false
            # SSHHostFingerprints are the fingerprints of known SSH hosts
            # that the cloning process can trust.
            # Create with ssh-keyscan [-t rsa] host
            ssh_host_fingerprints:
                - ""
            # SSHKeySecrets are the names of Kubernetes secrets that contain
            # SSK keys which should be used during the cloning process.
            ssh_key_secrets:
                - ""
            # Timeout is how long the pod utilities will wait
            # before aborting a job with SIGINT.
            timeout: 0s
            # UploadIgnoresInterrupts causes sidecar to ignore interrupts for the upload process in
            # hope that the test process exits cleanly before starting an upload.
            upload_ignores_interrupts: false
            # UtilityImages holds pull specs for utility container
            # images used to decorate a PodSpec.
            utility_images:
                # CloneRefs is the pull spec used for the clonerefs utility
                clonerefs: ' '
                # Entrypoint is the pull spec used for the entrypoint utility
                entrypoint: ' '
                # InitUpload is the pull spec used for the initupload utility
                initupload: ' '
                # sidecar is the pull spec used for the sidecar utility
                sidecar: ' '
    # JobQueueCapacities is an optional field used to define job queue max concurrency.
    # Each job can be assigned to a specific queue which has its own max concurrency,
    # independent from the job's name. Setting the concurrency to 0 will block any job
    # from being triggered. Setting the concurrency to a negative value will remove the
    # limit. An example use case would be easier scheduling of jobs using boskos resources.
    # This mechanism is separate from ProwJob's MaxConcurrency setting.
    job_queue_capacities:
        "": 0
    # JobURLPrefixConfig is the host and path prefix under which job details
    # will be viewable. Use `org/repo`, `org` or `*`as key and an url as value.
    job_url_prefix_config:
        "": ""
    # JobURLTemplateString compiles into JobURLTemplate at load time.
    job_url_template: ' '
    # JobURLPrefixDisableAppendStorageProvider disables that the storageProvider is
    # automatically appended to the JobURLPrefix.
    jobURLPrefixDisableAppendStorageProvider: true
    # PodPendingTimeout defines how long the controller will wait to perform a garbage
    # collection on pending pods. Defaults to 10 minutes.
    pod_pending_timeout: 0s
    # PodRunningTimeout defines how long the controller will wait to abort a prowjob pod
    # stuck in running state. Defaults to two days.
    pod_running_timeout: 0s
    # PodUnscheduledTimeout defines how long the controller will wait to abort a prowjob
    # stuck in an unscheduled state. Defaults to 5 minutes.
    pod_unscheduled_timeout: 0s
    # ReportTemplateString compiles into ReportTemplate at load time.
    report_template: ' '
    # ReportTemplateStrings is a mapping of template comments.
    # Use `org/repo`, `org` or `*` as a key.
    report_templates:
        "": ""
# PodNamespace is the namespace in the cluster that prow
# components will use for looking up Pods owned by ProwJobs.
# The namespace needs to exist and will not be created by prow.
# Defaults to "default".
pod_namespace: ' '
# ProwJobDefaultEntries holds a list of defaults for specific values
# Each entry in the slice specifies Repo and CLuster regexp filter fields to
# match against the jobs and a corresponding ProwJobDefault . All entries that
# match a job are used. Later matching entries override the fields of earlier
# matching entires.
prowjob_default_entries:
    - # Cluster matches against the cluster alias of the build cluster that the
      # ProwJob is configured to run on. Recall that ProwJobs default to running on
      # the "default" build cluster if they omit the "cluster" field in config.
      cluster: ' '
      # Config is the ProwJobDefault to apply if the filter fields all match the
      # ProwJob. Note that when multiple entries match a ProwJob they are all used
      # by sequentially merging with later entries overriding fields from earlier
      # entries.
      config:
        tenant_id: ' '
      # OrgRepo matches against the "org" or "org/repo" that the presubmit or postsubmit
      # is associated with. If the job is a periodic, extra_refs[0] is used. If the
      # job is a periodic without extra_refs, the empty string will be used.
      # If this field is omitted all jobs will match.
      repo: ' '
# ProwJobNamespace is the namespace in the cluster that prow
# components will use for looking up ProwJobs. The namespace
# needs to exist and will not be created by prow.
# Defaults to "default".
prowjob_namespace: ' '
# Pub/Sub Subscriptions that we want to listen to.
pubsub_subscriptions:
    "": null
# PubSubTriggers defines Pub/Sub Subscriptions that we want to listen to,
# can be used to restrict build cluster on a topic.
pubsub_triggers:
    - allowed_clusters:
        - ""
      max_outstanding_messages: 0
      project: ' '
      topics:
        - ""
# PushGateway is a prometheus push gateway.
push_gateway:
    # Endpoint is the location of the prometheus pushgateway
    # where prow will push metrics to.
    endpoint: ' '
    # Interval specifies how often prow will push metrics
    # to the pushgateway. Defaults to 1m.
    interval: 0s
    # ServeMetrics tells if or not the components serve metrics.
    serve_metrics: false
sinker:
    # ExcludeClusters are build clusters that don't want to be managed by sinker.
    exclude_clusters:
        - ""
    # MaxPodAge is how old a Pod can be before it is garbage-collected.
    # Defaults to one day.
    max_pod_age: 0s
    # MaxProwJobAge is how old a ProwJob can be before it is garbage-collected.
    # Defaults to one week.
    max_prowjob_age: 0s
    # ResyncPeriod is how often the controller will perform a garbage
    # collection. Defaults to one hour.
    resync_period: 0s
    # TerminatedPodTTL is how long a Pod can live after termination before it is
    # garbage collected.
    # Defaults to matching MaxPodAge.
    terminated_pod_ttl: 0s
slack_reporter_configs:
    "":
        channel: ' '
        host: ' '
        job_states_to_report:
            - ""
        job_types_to_report:
            - ""
        report: false
        report_template: ' '
# StatusErrorLink is the url that will be used for jenkins prowJobs that can't be
# found, or have another generic issue. The default that will be used if this is not set
# is: https://github.com/kubernetes/test-infra/issues.
status_error_link: ' '
tide:
    # BatchSizeLimitMap is a key/value pair of an org or org/repo as the key and
    # integer batch size limit as the value. Use "*" as key to set a global default.
    # Special values:
    # 0 => unlimited batch size
    # -1 => batch merging disabled :(
    batch_size_limit:
        "": 0
    # BlockerLabel is an optional label that is used to identify merge blocking
    # GitHub issues.
    # Leave this blank to disable this feature and save 1 API token per sync loop.
    blocker_label: ' '
    # TideContextPolicyOptions defines merge options for context. If not set it will infer
    # the required and optional contexts from the prow jobs configured and use the github
    # combined status; otherwise it may apply the branch protection setting or let user
    # define their own options in case branch protection is not used.
    context_options:
        # Infer required and optional jobs from Branch Protection configuration
        from-branch-protection: false
        optional-contexts:
            - ""
        # GitHub Orgs
        orgs:
            "":
                # Infer required and optional jobs from Branch Protection configuration
                from-branch-protection: false
                optional-contexts:
                    - ""
                repos:
                    "":
                        branches:
                            "":
                                # Infer required and optional jobs from Branch Protection configuration
                                from-branch-protection: false
                                optional-contexts:
                                    - ""
                                required-contexts:
                                    - ""
                                required-if-present-contexts:
                                    - ""
                                # whether to consider unknown contexts optional (skip) or required.
                                skip-unknown-contexts: false
                        # Infer required and optional jobs from Branch Protection configuration
                        from-branch-protection: false
                        optional-contexts:
                            - ""
                        required-contexts:
                            - ""
                        required-if-present-contexts:
                            - ""
                        # whether to consider unknown contexts optional (skip) or required.
                        skip-unknown-contexts: false
                required-contexts:
                    - ""
                required-if-present-contexts:
                    - ""
                # whether to consider unknown contexts optional (skip) or required.
                skip-unknown-contexts: false
        required-contexts:
            - ""
        required-if-present-contexts:
            - ""
        # whether to consider unknown contexts optional (skip) or required.
        skip-unknown-contexts: false
    # DisplayAllQueriesInStatus controls if Tide should mention all queries in the status it
    # creates. The default is to only mention the one to which we are closest (Calculated
    # by total number of requirements - fulfilled number of requirements).
    display_all_tide_queries_in_status: true
    gerrit:
        queries:
            - filters:
                branches:
                    - ""
                excluded_branches:
                    - ""
                opt_in_by_default: true
              opt_out_help: true
              org: ' '
              repos:
                - ""
    # A key/value pair of an org/repo as the key and Go template to override
    # the default merge commit title and/or message. Template is passed the
    # PullRequest struct (prow/github/types.go#PullRequest)
    merge_commit_template:
        "":
            body: ' '
            title: ' '
    # MergeLabel is an optional label that is used to identify PRs that should
    # always be merged with all individual commits from the PR.
    # Leave this blank to disable this feature.
    merge_label: ' '
    # A key/value pair of an org/repo as the key and merge method to override
    # the default method of merge. Valid options are squash, rebase, and merge.
    merge_method:
        "": ' '
    # PRStatusBaseURL is the base URL for the PR status page.
    # This is used to link to a merge requirements overview
    # in the tide status context.
    # Will be deprecated on June 2020.
    pr_status_base_url: ' '
    # PRStatusBaseURLs is the base URL for the PR status page
    # mapped by org or org/repo level.
    pr_status_base_urls:
        "": ""
    # PrioritizeExistingBatches configures on org or org/repo level if Tide should continue
    # testing pre-existing batches instead of immediately including new PRs as they become
    # eligible. Continuing on an old batch allows to re-use all existing test results whereas
    # starting a new one requires to start new instances of all tests.
    # Use '*' as key to set this globally. Defaults to true.
    prioritize_existing_batches:
        "": false
    # Priority is an ordered list of sets of labels that would be prioritized before other PRs
    # PRs should match all labels contained in a set to be prioritized. The first entry has
    # the highest priority.
    priority:
        - labels:
            - ""
    # Queries represents a list of GitHub search queries that collectively
    # specify the set of PRs that meet merge requirements.
    queries:
        - author: ' '
          excludedBranches:
            - ""
          excludedRepos:
            - ""
          includedBranches:
            - ""
          labels:
            - ""
          milestone: ' '
          missingLabels:
            - ""
          orgs:
            - ""
          repos:
            - ""
          reviewApprovedRequired: true
    # RebaseLabel is an optional label that is used to identify PRs that should
    # always be rebased and merged.
    # Leave this blank to disable this feature.
    rebase_label: ' '
    # SquashLabel is an optional label that is used to identify PRs that should
    # always be squash merged.
    # Leave this blank to disable this feature.
    squash_label: ' '
    # StatusUpdatePeriod specifies how often Tide will update GitHub status contexts.
    # Defaults to the value of SyncPeriod.
    status_update_period: 0s
    # SyncPeriod specifies how often Tide will sync jobs with GitHub. Defaults to 1m.
    sync_period: 0s
    # URL for tide status contexts.
    # We can consider allowing this to be set separately for separate repos, or
    # allowing it to be a template.
    target_url: ' '
    # TargetURLs is a map from "*", <org>, or <org/repo> to the URL for the tide status contexts.
    # The most specific key that matches will be used.
    # This field is mutually exclusive with TargetURL.
    target_urls:
        "": ""

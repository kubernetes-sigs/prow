// Code generated by go-bindata.
// sources:
// static/spyglass-lens.html
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticSpyglassLensHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xf9\x14\xaa\xae\x6d\x24\x97\x16\x5a\x82\xed\x42\xfa\x87\x16\x52\x5a\xd2\xe4\xd0\x53\x90\xa5\x89\xad\x8d\x2c\x19\xcd\xec\xc1\x18\x7f\xf7\x45\xb6\x97\xdd\x25\x0b\xbb\x27\xc3\xf3\xfb\xbd\x79\x92\x26\x7f\xf3\xed\xcf\xd7\xc3\xff\xbf\xdf\x59\x43\xad\x2b\x57\x79\xfa\x30\xa7\x7c\x5d\x70\xf0\x3c\x09\xa0\x4c\xb9\x62\x2c\x6f\x81\x14\xd3\x8d\x8a\x08\x54\xf0\xe3\xe1\xc7\xfa\x33\x9f\x7e\x90\x25\x07\xe5\xbf\xae\xaf\x9d\x42\x64\x3b\xf0\xb8\x61\xc3\x20\x0e\x49\x1f\xc7\x5c\xce\x86\x64\xad\x14\x02\x6b\x22\x9c\x0b\x3e\x0c\x62\xab\x10\x8e\xfb\xdd\x38\x72\x46\x2a\xd6\x29\xf6\xd4\xa9\x08\x9e\xe6\x60\x67\xfd\x85\x45\x70\x05\x47\xea\x1d\x60\x03\x40\x7c\xc1\x1b\xa2\x0e\x37\x52\xea\x60\x40\xd4\x40\xad\x71\xc2\x06\xf9\x5e\x7c\x10\x99\x6c\x15\x41\xb4\xca\x09\xeb\x8d\xad\xc3\xba\xb3\xfe\x22\x5a\xeb\x85\x46\x7c\x14\xfd\x34\xe9\x1c\x3c\xa1\xa8\x43\xa8\x1d\xa8\xce\xa2\xd0\xa1\x95\x1a\xf1\xcb\x59\xb5\xd6\xf5\xc5\x3e\x54\x81\xc2\xe6\x63\x96\xbd\xfb\x94\x65\xfc\xaa\xd8\xab\x2b\x3f\x3b\xc8\xea\xe0\xef\x27\xfd\x5e\xea\xbf\xfd\xa5\x83\xc7\x97\x83\x25\x92\x22\xab\x25\x2e\x4f\x20\x1d\x78\x7c\x38\x2b\xea\x68\x3b\x62\x18\xf5\xb5\xf5\x94\xac\xa7\xea\xd6\x1b\x07\xd3\x0d\xdd\x20\x2f\x73\x39\x23\x89\x1e\x06\xf1\x13\x94\x19\xc7\x55\x2e\xe7\x55\xc8\xab\x60\x7a\xa6\x13\x5d\xf0\x84\xaf\x93\xc0\x17\xf3\x36\x98\x7e\x32\x27\xb1\x4c\xd0\xb4\x57\x77\x01\x00\x00\xff\xff\x57\x0c\x6e\x14\x68\x02\x00\x00")

func staticSpyglassLensHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticSpyglassLensHtml,
		"static/spyglass-lens.html",
	)
}

func staticSpyglassLensHtml() (*asset, error) {
	bytes, err := staticSpyglassLensHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/spyglass-lens.html", size: 616, mode: os.FileMode(436), modTime: time.Unix(1582751428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %w", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/spyglass-lens.html": staticSpyglassLensHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": {nil, map[string]*bintree{
		"spyglass-lens.html": {staticSpyglassLensHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
